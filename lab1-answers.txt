Lab1 write up:

We first implement Tuple and TupleDesc class. In Tuple class, it holds fields of TupleDesc, RecordId and a list of Field. To construct a Tuple object, one needs to pass a TupleDesc to the Tuple constructor, and the constructor will first verified whether the value is valid in every FieldType the tuple descriptor contains before assigning the value passing in to the memory. Also in the constructor the a list of field is assigned to store the field of TupleDesc. RecordId and field of TupleDesc is also set and get in Tuple class. The iterator of filed is implemented by the ArrayList.iterator() which is a built in function in ArrayList class.

In TupleDesc, it stores a list of TDItem which contains a field type and a field name. In the constructor, two arrays are passed into it. The first one is a Type array. The second one is string of field. The values will be taken out one by one from this two array to construct a TDItem, and store this TDItem in the list of field. It's valid to miss out the name of the field to construct a TDItem. The numFields() will return the size of the list field. Using an index, the field name and the field type can be obtained. Using a name can also trace back the index of that name of field. To calculate the size of the total field, we iterate through all the field in the list and sum up the size after getting the length of each of the field. The TupleDesc class can also perform merge operation by passing two TupleDesc into. It's implemented by creating two new array, and copy all the Types and name of field into this bigger array which total size is the sum of the two TupleDesc, and declare a new merged TupleDesc by passing two new copied array into it.

The catalog class consists of a list of the tables and schemas of the tables that are currently in the database. With a name or a tableId, a specific table can be retrieved. DatabaseFile can also be retrieved by tableId. Adding method of table is included in this class as well. The catalog class keeps track of all available tables in the database and their associated schemas.

The buffer pool class is responsible for caching pages in memory that have been recently read from disk. The buffer pool stores all the pages called previously in the memory for the next time call to reduce the time reading pages from the disk. With a specific PageId, a page in the buffer pool can be retrieved. 

HeapPage is an object store in the HeapFile, and a heapPage contains a list of tuples and a header to keep track of the available slots. Each heapPage has a specific heapPageId which is constructed by the tableId and the pageNo. The number of slots are calculated by the page size in buffer pool *8 divided by (the size of the TupleDesc + 1) and set the value to the biggest integer closest to the value.

HeapPageId class is an implementation of the PageId which is used by HeapPage to identify which heapPage it is. It is constructed by the tableId and number of page.

A recordId is a reference to a specific tuple on a specific page of a specific table. With a recordId, the specific tuple can be directly accessed by its tuple number and its pageID.

HeapFile is an implementation of a DbFile that stores a collection of tuples in no particular order. The file in the class is accessed by RandomAccessFile method which allows direct access at the specific starting point. HeapFile is working closely with heapPage class. 

SeqScan is an implementation of a sequential scan method that reads tuples in a table in the order of how they laid on the disk. The tableAlias is used when two tables are joining together.

The HeapFileIterator class is added to the simpledb for the implementation of the DbFileIterator in use of heapFile class.

One unit test can be add is that to pass in a defected input into the system, and see whether the implementation can detect the defect in the input. Such as passing a TupleDesc with not only a string or integer type of field.
